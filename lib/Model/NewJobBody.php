<?php
/**
 * NewJobBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cielo24
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cielo24
 *
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cielo24\Model;

use \ArrayAccess;
use \Cielo24\ObjectSerializer;

/**
 * NewJobBody Class Doc Comment
 *
 * @category Class
 * @package  Cielo24
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NewJobBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewJobBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'job_name' => 'string',
        'language' => 'string',
        'external_id' => 'string',
        'username' => 'string',
        'requestor' => 'string',
        'reference' => 'string',
        'expected_speakers' => 'int',
        'is_duplicate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'job_name' => null,
        'language' => null,
        'external_id' => null,
        'username' => null,
        'requestor' => null,
        'reference' => null,
        'expected_speakers' => null,
        'is_duplicate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'job_name' => 'job_name',
        'language' => 'language',
        'external_id' => 'external_id',
        'username' => 'username',
        'requestor' => 'requestor',
        'reference' => 'reference',
        'expected_speakers' => 'expected_speakers',
        'is_duplicate' => 'is_duplicate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'job_name' => 'setJobName',
        'language' => 'setLanguage',
        'external_id' => 'setExternalId',
        'username' => 'setUsername',
        'requestor' => 'setRequestor',
        'reference' => 'setReference',
        'expected_speakers' => 'setExpectedSpeakers',
        'is_duplicate' => 'setIsDuplicate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'job_name' => 'getJobName',
        'language' => 'getLanguage',
        'external_id' => 'getExternalId',
        'username' => 'getUsername',
        'requestor' => 'getRequestor',
        'reference' => 'getReference',
        'expected_speakers' => 'getExpectedSpeakers',
        'is_duplicate' => 'getIsDuplicate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IS_DUPLICATE_TRUE = 'true';
    public const IS_DUPLICATE_FALSE = 'false';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsDuplicateAllowableValues()
    {
        return [
            self::IS_DUPLICATE_TRUE,
            self::IS_DUPLICATE_FALSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['job_name'] = $data['job_name'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['requestor'] = $data['requestor'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['expected_speakers'] = $data['expected_speakers'] ?? null;
        $this->container['is_duplicate'] = $data['is_duplicate'] ?? 'false';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIsDuplicateAllowableValues();
        if (!is_null($this->container['is_duplicate']) && !in_array($this->container['is_duplicate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'is_duplicate', must be one of '%s'",
                $this->container['is_duplicate'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets job_name
     *
     * @return string|null
     */
    public function getJobName()
    {
        return $this->container['job_name'];
    }

    /**
     * Sets job_name
     *
     * @param string|null $job_name A human readable identifier for the job
     *
     * @return self
     */
    public function setJobName($job_name)
    {
        $this->container['job_name'] = $job_name;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Native job language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id An identifier you want to associate with this job
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Create the job in specified sub-account
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets requestor
     *
     * @return string|null
     */
    public function getRequestor()
    {
        return $this->container['requestor'];
    }

    /**
     * Sets requestor
     *
     * @param string|null $requestor An requestor you want to associate with this job
     *
     * @return self
     */
    public function setRequestor($requestor)
    {
        $this->container['requestor'] = $requestor;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference An reference you want to associate with this job
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets expected_speakers
     *
     * @return int|null
     */
    public function getExpectedSpeakers()
    {
        return $this->container['expected_speakers'];
    }

    /**
     * Sets expected_speakers
     *
     * @param int|null $expected_speakers Amount of speakers that the video will have
     *
     * @return self
     */
    public function setExpectedSpeakers($expected_speakers)
    {
        $this->container['expected_speakers'] = $expected_speakers;

        return $this;
    }

    /**
     * Gets is_duplicate
     *
     * @return string|null
     */
    public function getIsDuplicate()
    {
        return $this->container['is_duplicate'];
    }

    /**
     * Sets is_duplicate
     *
     * @param string|null $is_duplicate Allows creating multiple jobs with the same external_id
     *
     * @return self
     */
    public function setIsDuplicate($is_duplicate)
    {
        $allowedValues = $this->getIsDuplicateAllowableValues();
        if (!is_null($is_duplicate) && !in_array($is_duplicate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'is_duplicate', must be one of '%s'",
                    $is_duplicate,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['is_duplicate'] = $is_duplicate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


