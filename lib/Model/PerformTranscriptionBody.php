<?php
/**
 * PerformTranscriptionBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cielo24
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cielo24
 *
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cielo24\Model;

use \ArrayAccess;
use \Cielo24\ObjectSerializer;

/**
 * PerformTranscriptionBody Class Doc Comment
 *
 * @category Class
 * @package  Cielo24
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PerformTranscriptionBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PerformTranscriptionBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'job_id' => 'string',
        'transcription_fidelity' => 'string',
        'priority' => 'string',
        'callback_url' => 'string',
        'options' => 'string',
        'target_language' => 'string',
        'turnaround_hours' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'job_id' => null,
        'transcription_fidelity' => null,
        'priority' => null,
        'callback_url' => null,
        'options' => null,
        'target_language' => null,
        'turnaround_hours' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'job_id' => 'job_id',
        'transcription_fidelity' => 'transcription_fidelity',
        'priority' => 'priority',
        'callback_url' => 'callback_url',
        'options' => 'options',
        'target_language' => 'target_language',
        'turnaround_hours' => 'turnaround_hours'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'job_id' => 'setJobId',
        'transcription_fidelity' => 'setTranscriptionFidelity',
        'priority' => 'setPriority',
        'callback_url' => 'setCallbackUrl',
        'options' => 'setOptions',
        'target_language' => 'setTargetLanguage',
        'turnaround_hours' => 'setTurnaroundHours'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'job_id' => 'getJobId',
        'transcription_fidelity' => 'getTranscriptionFidelity',
        'priority' => 'getPriority',
        'callback_url' => 'getCallbackUrl',
        'options' => 'getOptions',
        'target_language' => 'getTargetLanguage',
        'turnaround_hours' => 'getTurnaroundHours'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSCRIPTION_FIDELITY_MECHANICAL = 'MECHANICAL';
    public const TRANSCRIPTION_FIDELITY_PREMIUM = 'PREMIUM';
    public const TRANSCRIPTION_FIDELITY_PROFESSIONAL = 'PROFESSIONAL';
    public const PRIORITY_STANDARD = 'STANDARD';
    public const PRIORITY_PRIORITY = 'PRIORITY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTranscriptionFidelityAllowableValues()
    {
        return [
            self::TRANSCRIPTION_FIDELITY_MECHANICAL,
            self::TRANSCRIPTION_FIDELITY_PREMIUM,
            self::TRANSCRIPTION_FIDELITY_PROFESSIONAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_STANDARD,
            self::PRIORITY_PRIORITY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['job_id'] = $data['job_id'] ?? null;
        $this->container['transcription_fidelity'] = $data['transcription_fidelity'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['callback_url'] = $data['callback_url'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['target_language'] = $data['target_language'] ?? null;
        $this->container['turnaround_hours'] = $data['turnaround_hours'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['job_id'] === null) {
            $invalidProperties[] = "'job_id' can't be null";
        }
        if ($this->container['transcription_fidelity'] === null) {
            $invalidProperties[] = "'transcription_fidelity' can't be null";
        }
        $allowedValues = $this->getTranscriptionFidelityAllowableValues();
        if (!is_null($this->container['transcription_fidelity']) && !in_array($this->container['transcription_fidelity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transcription_fidelity', must be one of '%s'",
                $this->container['transcription_fidelity'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'priority', must be one of '%s'",
                $this->container['priority'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets job_id
     *
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param string $job_id The ID of the job
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets transcription_fidelity
     *
     * @return string
     */
    public function getTranscriptionFidelity()
    {
        return $this->container['transcription_fidelity'];
    }

    /**
     * Sets transcription_fidelity
     *
     * @param string $transcription_fidelity The desired fidelity of the transcription
     *
     * @return self
     */
    public function setTranscriptionFidelity($transcription_fidelity)
    {
        $allowedValues = $this->getTranscriptionFidelityAllowableValues();
        if (!in_array($transcription_fidelity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transcription_fidelity', must be one of '%s'",
                    $transcription_fidelity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transcription_fidelity'] = $transcription_fidelity;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority The desired priority of the transcription
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'priority', must be one of '%s'",
                    $priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url A URL with query string which will be called on completion. If submitting the callback_url as a query string parameter, rather than a value in the POST data, the callback_url should be URL encoded. The callback URL can contain tags that will be replaced with job specific data when the callback is called. Below is the list of tags that are supported: {job_id}, {job_name}, {elementlist_version}, {iwp_name} (The Interim Work Product name associated with this ElementList version)
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options A job options json. See JobOptions object for details.
     *
     * @return self
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets target_language
     *
     * @return string|null
     */
    public function getTargetLanguage()
    {
        return $this->container['target_language'];
    }

    /**
     * Sets target_language
     *
     * @param string|null $target_language An RFC 5646 language code to translate this job into. If not specified, then no translation will be performed. If specified, but the language code specified matches the language code on the job request, then no translation will be performed.
     *
     * @return self
     */
    public function setTargetLanguage($target_language)
    {
        $this->container['target_language'] = $target_language;

        return $this;
    }

    /**
     * Gets turnaround_hours
     *
     * @return int|null
     */
    public function getTurnaroundHours()
    {
        return $this->container['turnaround_hours'];
    }

    /**
     * Sets turnaround_hours
     *
     * @param int|null $turnaround_hours The number of hours after submission that the job will be returned. If not specified, it will be set to a default based on the value of the priority parameter. The defaults are 24 and 48 for the PRIORITY and STANDARD priorities respectively. If you request a smaller number of hours than the default for the priority you have selected, the priority will be automatically changed. For example if you request a turnaround_hours of 16 with a priority of STANDARD, the priority will be automatically, and silently, changed to PRIORITY.
     *
     * @return self
     */
    public function setTurnaroundHours($turnaround_hours)
    {
        $this->container['turnaround_hours'] = $turnaround_hours;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


