<?php
/**
 * JobInfoResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cielo24
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cielo24
 *
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cielo24\Model;

use \ArrayAccess;
use \Cielo24\ObjectSerializer;

/**
 * JobInfoResponse Class Doc Comment
 *
 * @category Class
 * @package  Cielo24
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class JobInfoResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JobInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'job_id' => 'string',
        'job_name' => 'string',
        'media_length_seconds' => 'float',
        'external_id' => 'string',
        'priority' => 'string',
        'fidelity' => 'string',
        'job_status' => 'string',
        'options' => '\Cielo24\Model\JobOptions',
        'return_targets' => 'object',
        'source_language' => 'string',
        'target_language' => 'string',
        'creation_date' => 'string',
        'start_date' => 'string',
        'due_date' => 'string',
        'completed_date' => 'string',
        'return_date' => 'string',
        'authorization_date' => 'string',
        'job_difficulty' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'job_id' => null,
        'job_name' => null,
        'media_length_seconds' => null,
        'external_id' => null,
        'priority' => null,
        'fidelity' => null,
        'job_status' => null,
        'options' => null,
        'return_targets' => null,
        'source_language' => null,
        'target_language' => null,
        'creation_date' => null,
        'start_date' => null,
        'due_date' => null,
        'completed_date' => null,
        'return_date' => null,
        'authorization_date' => null,
        'job_difficulty' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'job_id' => 'JobId',
        'job_name' => 'JobName',
        'media_length_seconds' => 'MediaLengthSeconds',
        'external_id' => 'ExternalId',
        'priority' => 'Priority',
        'fidelity' => 'Fidelity',
        'job_status' => 'JobStatus',
        'options' => 'Options',
        'return_targets' => 'ReturnTargets',
        'source_language' => 'SourceLanguage',
        'target_language' => 'TargetLanguage',
        'creation_date' => 'CreationDate',
        'start_date' => 'StartDate',
        'due_date' => 'DueDate',
        'completed_date' => 'CompletedDate',
        'return_date' => 'ReturnDate',
        'authorization_date' => 'AuthorizationDate',
        'job_difficulty' => 'JobDifficulty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'job_id' => 'setJobId',
        'job_name' => 'setJobName',
        'media_length_seconds' => 'setMediaLengthSeconds',
        'external_id' => 'setExternalId',
        'priority' => 'setPriority',
        'fidelity' => 'setFidelity',
        'job_status' => 'setJobStatus',
        'options' => 'setOptions',
        'return_targets' => 'setReturnTargets',
        'source_language' => 'setSourceLanguage',
        'target_language' => 'setTargetLanguage',
        'creation_date' => 'setCreationDate',
        'start_date' => 'setStartDate',
        'due_date' => 'setDueDate',
        'completed_date' => 'setCompletedDate',
        'return_date' => 'setReturnDate',
        'authorization_date' => 'setAuthorizationDate',
        'job_difficulty' => 'setJobDifficulty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'job_id' => 'getJobId',
        'job_name' => 'getJobName',
        'media_length_seconds' => 'getMediaLengthSeconds',
        'external_id' => 'getExternalId',
        'priority' => 'getPriority',
        'fidelity' => 'getFidelity',
        'job_status' => 'getJobStatus',
        'options' => 'getOptions',
        'return_targets' => 'getReturnTargets',
        'source_language' => 'getSourceLanguage',
        'target_language' => 'getTargetLanguage',
        'creation_date' => 'getCreationDate',
        'start_date' => 'getStartDate',
        'due_date' => 'getDueDate',
        'completed_date' => 'getCompletedDate',
        'return_date' => 'getReturnDate',
        'authorization_date' => 'getAuthorizationDate',
        'job_difficulty' => 'getJobDifficulty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRIORITY_STANDARD = 'STANDARD';
    public const PRIORITY_PRIORITY = 'PRIORITY';
    public const FIDELITY_MECHANICAL = 'MECHANICAL';
    public const FIDELITY_PREMIUM = 'PREMIUM';
    public const FIDELITY_PROFESSIONAL = 'PROFESSIONAL';
    public const FIDELITY_HIGH = 'HIGH';
    public const JOB_STATUS_AUTHORIZING = 'Authorizing';
    public const JOB_STATUS_PENDING = 'Pending';
    public const JOB_STATUS_IN_PROCESS = 'In Process';
    public const JOB_STATUS_COMPLETE = 'Complete';
    public const JOB_STATUS_MEDIA_FAILURE = 'Media Failure';
    public const JOB_STATUS_REVIEWING = 'Reviewing';
    public const JOB_DIFFICULTY_GOOD = 'Good';
    public const JOB_DIFFICULTY_BAD = 'Bad';
    public const JOB_DIFFICULTY_UNKNOWN = 'Unknown';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_STANDARD,
            self::PRIORITY_PRIORITY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFidelityAllowableValues()
    {
        return [
            self::FIDELITY_MECHANICAL,
            self::FIDELITY_PREMIUM,
            self::FIDELITY_PROFESSIONAL,
            self::FIDELITY_HIGH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobStatusAllowableValues()
    {
        return [
            self::JOB_STATUS_AUTHORIZING,
            self::JOB_STATUS_PENDING,
            self::JOB_STATUS_IN_PROCESS,
            self::JOB_STATUS_COMPLETE,
            self::JOB_STATUS_MEDIA_FAILURE,
            self::JOB_STATUS_REVIEWING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobDifficultyAllowableValues()
    {
        return [
            self::JOB_DIFFICULTY_GOOD,
            self::JOB_DIFFICULTY_BAD,
            self::JOB_DIFFICULTY_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['job_id'] = $data['job_id'] ?? null;
        $this->container['job_name'] = $data['job_name'] ?? null;
        $this->container['media_length_seconds'] = $data['media_length_seconds'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['fidelity'] = $data['fidelity'] ?? null;
        $this->container['job_status'] = $data['job_status'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['return_targets'] = $data['return_targets'] ?? null;
        $this->container['source_language'] = $data['source_language'] ?? null;
        $this->container['target_language'] = $data['target_language'] ?? null;
        $this->container['creation_date'] = $data['creation_date'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['due_date'] = $data['due_date'] ?? null;
        $this->container['completed_date'] = $data['completed_date'] ?? null;
        $this->container['return_date'] = $data['return_date'] ?? null;
        $this->container['authorization_date'] = $data['authorization_date'] ?? null;
        $this->container['job_difficulty'] = $data['job_difficulty'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'priority', must be one of '%s'",
                $this->container['priority'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFidelityAllowableValues();
        if (!is_null($this->container['fidelity']) && !in_array($this->container['fidelity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fidelity', must be one of '%s'",
                $this->container['fidelity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJobStatusAllowableValues();
        if (!is_null($this->container['job_status']) && !in_array($this->container['job_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'job_status', must be one of '%s'",
                $this->container['job_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJobDifficultyAllowableValues();
        if (!is_null($this->container['job_difficulty']) && !in_array($this->container['job_difficulty'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'job_difficulty', must be one of '%s'",
                $this->container['job_difficulty'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets job_id
     *
     * @return string|null
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param string|null $job_id job_id
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets job_name
     *
     * @return string|null
     */
    public function getJobName()
    {
        return $this->container['job_name'];
    }

    /**
     * Sets job_name
     *
     * @param string|null $job_name job_name
     *
     * @return self
     */
    public function setJobName($job_name)
    {
        $this->container['job_name'] = $job_name;

        return $this;
    }

    /**
     * Gets media_length_seconds
     *
     * @return float|null
     */
    public function getMediaLengthSeconds()
    {
        return $this->container['media_length_seconds'];
    }

    /**
     * Sets media_length_seconds
     *
     * @param float|null $media_length_seconds media_length_seconds
     *
     * @return self
     */
    public function setMediaLengthSeconds($media_length_seconds)
    {
        $this->container['media_length_seconds'] = $media_length_seconds;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Depends on third-party integrations.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'priority', must be one of '%s'",
                    $priority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets fidelity
     *
     * @return string|null
     */
    public function getFidelity()
    {
        return $this->container['fidelity'];
    }

    /**
     * Sets fidelity
     *
     * @param string|null $fidelity fidelity
     *
     * @return self
     */
    public function setFidelity($fidelity)
    {
        $allowedValues = $this->getFidelityAllowableValues();
        if (!is_null($fidelity) && !in_array($fidelity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fidelity', must be one of '%s'",
                    $fidelity,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fidelity'] = $fidelity;

        return $this;
    }

    /**
     * Gets job_status
     *
     * @return string|null
     */
    public function getJobStatus()
    {
        return $this->container['job_status'];
    }

    /**
     * Sets job_status
     *
     * @param string|null $job_status job_status
     *
     * @return self
     */
    public function setJobStatus($job_status)
    {
        $allowedValues = $this->getJobStatusAllowableValues();
        if (!is_null($job_status) && !in_array($job_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'job_status', must be one of '%s'",
                    $job_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['job_status'] = $job_status;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Cielo24\Model\JobOptions|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Cielo24\Model\JobOptions|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets return_targets
     *
     * @return object|null
     */
    public function getReturnTargets()
    {
        return $this->container['return_targets'];
    }

    /**
     * Sets return_targets
     *
     * @param object|null $return_targets return_targets
     *
     * @return self
     */
    public function setReturnTargets($return_targets)
    {
        $this->container['return_targets'] = $return_targets;

        return $this;
    }

    /**
     * Gets source_language
     *
     * @return string|null
     */
    public function getSourceLanguage()
    {
        return $this->container['source_language'];
    }

    /**
     * Sets source_language
     *
     * @param string|null $source_language RFC 5646 Language Code
     *
     * @return self
     */
    public function setSourceLanguage($source_language)
    {
        $this->container['source_language'] = $source_language;

        return $this;
    }

    /**
     * Gets target_language
     *
     * @return string|null
     */
    public function getTargetLanguage()
    {
        return $this->container['target_language'];
    }

    /**
     * Sets target_language
     *
     * @param string|null $target_language RFC 5646 Language Code
     *
     * @return self
     */
    public function setTargetLanguage($target_language)
    {
        $this->container['target_language'] = $target_language;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date ISO 8601 Date String
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date ISO 8601 Date String
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string|null $due_date ISO 8601 Date String
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets completed_date
     *
     * @return string|null
     */
    public function getCompletedDate()
    {
        return $this->container['completed_date'];
    }

    /**
     * Sets completed_date
     *
     * @param string|null $completed_date ISO 8601 Date String
     *
     * @return self
     */
    public function setCompletedDate($completed_date)
    {
        $this->container['completed_date'] = $completed_date;

        return $this;
    }

    /**
     * Gets return_date
     *
     * @return string|null
     */
    public function getReturnDate()
    {
        return $this->container['return_date'];
    }

    /**
     * Sets return_date
     *
     * @param string|null $return_date ISO 8601 Date String
     *
     * @return self
     */
    public function setReturnDate($return_date)
    {
        $this->container['return_date'] = $return_date;

        return $this;
    }

    /**
     * Gets authorization_date
     *
     * @return string|null
     */
    public function getAuthorizationDate()
    {
        return $this->container['authorization_date'];
    }

    /**
     * Sets authorization_date
     *
     * @param string|null $authorization_date ISO 8601 Date String
     *
     * @return self
     */
    public function setAuthorizationDate($authorization_date)
    {
        $this->container['authorization_date'] = $authorization_date;

        return $this;
    }

    /**
     * Gets job_difficulty
     *
     * @return string|null
     */
    public function getJobDifficulty()
    {
        return $this->container['job_difficulty'];
    }

    /**
     * Sets job_difficulty
     *
     * @param string|null $job_difficulty job_difficulty
     *
     * @return self
     */
    public function setJobDifficulty($job_difficulty)
    {
        $allowedValues = $this->getJobDifficultyAllowableValues();
        if (!is_null($job_difficulty) && !in_array($job_difficulty, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'job_difficulty', must be one of '%s'",
                    $job_difficulty,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['job_difficulty'] = $job_difficulty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


